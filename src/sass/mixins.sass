// =============================================================================
// Mixins & Functions
// =============================================================================

////////////////////////////////////////////////////////////////////////////////
//BOOTSTRAP AND RESPONSIVE BEHAVIOUR
////////////////////////////////////////////////////////////////////////////////

//BOOTSTRAP BREAKPOINTS VERSION 3.7.7
$xs: 480px
$sm: 768px
$md: 992px
$lg: 1200px

//Mixins Media Queries	-usage +bp-xs / +bp-sm / +bp-md / +bp-lg
@mixin bp-xs
	@media (min-width: 480px)
		@content

@mixin bp-sm
	@media (min-width: 768px)
		@content

@mixin bp-md
	@media (min-width: 992px)
		@content

@mixin bp-lg
	@media (min-width: 1200px)
		@content

//Responsive CSS-Grid  - usage  +grid(5, 3%)
@mixin grid($cols, $mgn)
	float: left
	width: ((100% - (($cols - 1) * $mgn)) / $cols )
	margin-right: $mgn
	margin-bottom: $mgn
	&:nth-child(#{$cols}n)
		margin-right: 0


//Responsive FONTS
@mixin font-size($fs-map, $fs-breakpoints: $breakpoints)
	@each $fs-breakpoint, $fs-font-size in $fs-map
		@if $fs-breakpoint == null
			@include make-font-size($fs-font-size)
		@else
			// If $fs-font-size is a key that exists in
			// $fs-breakpoints, use the value
			@if map-has-key($fs-breakpoints, $fs-breakpoint)
				$fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint)
			@media screen and (min-width: $fs-breakpoint)
				@include make-font-size($fs-font-size)

//Responsive FONTS => Utility function for mixin font-size
@mixin make-font-size($fs-font-size)
	// If $fs-font-size is a list, include
	// both font-size and line-height
	@if type-of($fs-font-size) == "list"
		font-size: nth($fs-font-size, 1)
		@if (length($fs-font-size) > 1)
			line-height: nth($fs-font-size, 2)
	@else
		font-size: $fs-font-size


//FONT FACE
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg)
	$src: null

	$extmods: ( eot: "?", svg: "#" + str-replace($name, " ", "_"))

	$formats: ( otf: "opentype", ttf: "truetype" )

	@each $ext in $exts
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext)
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext)
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma)

	@font-face
		font-family: quote($name)
		font-style: $style
		font-weight: $weight
		src: $src

////////////////////////////////////////////////////////////////////////////////
//GENERAL MIXINS
////////////////////////////////////////////////////////////////////////////////
//AutoPush - usage +push--auto (doesn't matter the margin)
@mixin push--auto
	margin
		left: auto
		right: auto

//Responsive ratio - usage responsive-ratio(16,9)=>Ratio constant for containers
@mixin responsive-ratio($x,$y, $pseudo: false)
  $padding: unquote( ( $y / $x ) * 100 + '%' )
  @if $pseudo
    &:before
      @include pseudo($pos: relative)
      width: 100%
      padding-top: $padding
  @else
    padding-top: $padding

//Placeholde conten - usage +input-placeholder{color: grey}
@mixin input-placeholder
  &.placeholder
    @content
    &:-moz-placeholder
      @content
    &::-moz-placeholder
      @content
    &:-ms-input-placeholder
      @content
    &::-webkit-input-placeholder
      @content

//CLEAR-FIX   -usage +%clearfix;
%clearfix
	*zoom: 1
	&:before, &:after
		content: " "
		display: table
	&:after
		clear: both

//LINEAR-GRADIENT  -usage +background-image: linear-gradient(red, blue);/ @include linear-gradient(red, blue)
@mixin linear-gradient($direction, $color-stops...)
	background: nth(nth($color-stops, 1), 1)
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops)
	background: -moz-linear-gradient(legacy-direction($direction), $color-stops)
	background: -o-linear-gradient(legacy-direction($direction), $color-stops)
	background: linear-gradient($direction, $color-stops)
